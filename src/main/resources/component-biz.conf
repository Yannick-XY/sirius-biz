product {
    modules {
        sirius-biz {
            version = "${project.version}"
            build = "${build.number}"
            date = "${timestamp}"
            vcs = "${build.vcs.number}"
        }
    }
}

sirius.frameworks {
    tenants = true
    code-lists = true
    protocols = true
    sequences = true
    locks = true
    statistics = true
}

timer.daily.journal-cleaner = 2

journal {
    keep-logs = 30 days
    keep-incidents = 30 days
}

health.limits {
    # Controls how many statistics updates per minute are considered healthy
    # The actual values depend heavily on the system and application - these
    # just seem like reasonable standard values.
    statistics-updates.gray  =  10
    statistics-updates.warn  = 500
    statistics-updates.error =   0

    # If there is any lock held, we will report this - but there is no
    # sane limit how many locks can be considered healthy / unhealty
    locks-count.gray  = 1
    locks-count.warn  = 0
    locks-count.error = 0

    # We start to warn as soon as we encounter one long running lock
    # (held for at least 30min). As this can still be quite alright
    # we do not consider this critical (red)
    locks-long-running.gray  = 0
    locks-long-running.warn  = 1
    locks-long-running.error = 0
}


jobs {
    # Max amout of logs to keep
    # Note that the system will not delete logs which are younger than "keep-logs-days"
    max-logs = 10

    # The number of days a job log is kept, even if this job has more than "max-logs" protocols
    keep-logs-days = 14
}

content.extensions {

    view-menu-left {
        settings {
            priority = 1000
            template = "wondergem/menu-left-settings.html"
        }
    }

    view-settings-menu {
        code-lists {
            priority = 100
            template = "codelists/settings-menu-code-lists.html"
        }
    }

    view-menu-right {
        user {
            priority = 500
            template = "wondergem/menu-right-user.html"
        }
    }

    view-user-menu {
        tenants {
            priority = 100
            template = "tenants/user-menu-tenants.html"
        }
    }


}

code-lists {
    default {
        autofill = true
    }

    salutations {
        name = "Salutations"
        description = "Contains all salutations known to the system"
    }

    countries {
        name = "Countries"
        description = "Contains all countries known to the system. A RegEx can be supplied as additional value which is used to verify ZIP codes"
    }
}

storage {

    baseDir = "data/storage"

    # If using ImageMagick, consider a command like:
    # "convert ${src} -resize ${width}x${height}> -quiet -quality 89 -format jpeg -strip -colorspace RGB -background white -flatten ${dest}"
    conversionCommand=""

    buckets {
        default {
            permission = "permission-manage-files"
            canCreate = false
            canEdit = false
            canDelete = false
            deleteFilesAfterDays = 0
            engine = "fs"
        }

        work {
            canCreate = true
            canEdit = true
            canDelete = true
            deleteFilesAfterDays = 30
        }

        media {
            canCreate = true
            canEdit = true
            canDelete = true
        }
    }
}

security {

    passwordMinLength = 4
    passwordSaneLength = 6

    scopes.default {
        manager = "tenants"
        system-tenant = "1"
        loginCookieTTL = 90 days
        defaultRoles = [ "permission-system-state" ]
    }

    permissions {
        permission-manage-system : "Required for system tenant user accounts to manage system settings"
        permission-manage-tenants : "Required to manage tenants of the system"
        permission-manage-user-accounts : "Required to manage user accounts"
        permission-manage-code-lists : "Required to manage code lists"
        permission-view-protocols : "Required to view protocols like logs, errors, mails"
        permission-select-tenant : "Required to switch to another tenant"
        permission-select-user-account : "Required to switch to another user"
        permission-tasks : "Required to view all managed tasks"
        permission-manage-jobs : "Required to edit and create jobs"
        permission-execute-jobs : "Required to execute jobs"
        permission-manage-files : "Required to manage well known buckets in the storage system"

    }

    roles = [ "user-administrator", "administrator", "jobs-manager" ]

    tenantPermissions = [
        "feature-provide-jobs"
    ]

    profiles {

        flag-system-tenant {
            permission-manage-tenants = true
            permission-manage-code-lists = true
            permission-view-protocols = true
            permission-system-console = true
            permission-system-scripting = true
            permission-system-notify-state = true
            permission-tasks = true
            feature-provide-jobs = true
        }

        user-administrator {
            permission-manage-user-accounts = true
            permission-select-user-account = true
            permission-manage-system = true
        }

        administrator {
            permission-select-tenant = true
            permission-execute-jobs = true
            permission-manage-jobs = true
            permission-view-scope-default-config = true
            permission-manage-jobs = true
            permission-manage-files = true
        }

        jobs-manager {
            permission-manage-jobs = true
            permission-execute-jobs = true
        }
    }

}

cache {

    tenants-users {
        maxSize = 100
        ttl = 1 hour
    }

    tenants-roles {
        maxSize = 100
        ttl = 1 hour
    }

    tenants-children {
        maxSize = 256
        ttl = 1 hour
    }

    tenants-tenants {
        maxSize = 32
        ttl = 1 hour
    }

    storage-object-metadata {
        maxSize = 4096
        ttl = 1 hour
    }

}

mail {
    templates {
        user-account-password {
                    subject = "#nls('mail-password.subject')"
                    text = mail/useraccount/password.vm
                    html = mail/useraccount/password-html.vm
                }
    }
}