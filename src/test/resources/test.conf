docker.file = "src/test/resources/docker-compose.yml"

sirius.frameworks {
    biz.tenants = true
    biz.tenants-jdbc = true
    biz.tenants-mongo = false
    biz.code-lists-jdbc = false
    biz.code-lists-mongo = false
    biz.protocols = true
    biz.journal = true
    biz.sequences = true
    biz.locks = true
    biz.storage = true
    biz.storage-replication-jdbc = false
    biz.storage-replication-mongo = false
    biz.isenguard = true
    biz.processes = true
    biz.jobs = true
    biz.job-presets-jdbc = false
    biz.job-presets-mongo = false
    biz.analytics-execution-flags-jdbc = false
    biz.analytics-execution-flags-mongo = false
    biz.analytics-metrics-jdbc = false
    biz.analytics-metrics-mongo = false
    biz.scheduler-jdbc = false
    biz.scheduler-mongo = false
}

jdbc {

    database {
        test {
            profile = "mysql"
            user = "root"
            password = "root"
            database = "test"
        }

        clickhouse {
            profile = "clickhouse"
            user = ""
            password = ""
            database = "test"
        }
    }

}

mixing {
    jdbc {
        mixing {
            dialect = "mysql"
            database = "test"
            initSql = "CREATE DATABASE IF NOT EXISTS test"
        }

        analytics {
            dialect = "clickhouse"
            database = "clickhouse"
            initSql = "CREATE DATABASE test"
        }
    }
}

mongo.databases.mixing {
    hosts = "localhost"
    db = "test"
}

elasticsearch {
    hosts = "localhost"
}

redis.pools.system.host = "localhost"

s3 {

    stores {
        system {
            accessKey = "AKIAIOSFODNN7EXAMPLE"
            secretKey = "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
            endPoint = "http://localhost:9000/s3"
            bucketSuffix = ".sirius.biz"
            pathStyleAccess = true

            # Specifies the signer to use. Leave empty to use the standard signer of the
            # current AWS SDK.
            signer = ""

            # Use the following setting for CEPH stores:
            # signer = "S3SignerType"
        }
    }

}

isenguard.limit.test {
    interval = 1m
    limit = 5
}

async {
    distributed {
        queues {
            fifo-test {
                concurrencyToken = test
            }
            prioritized-test {
                concurrencyToken = test
                prioritized = true
                penaltyTime = 10 seconds
            }
        }

        concurrency {
            test = 1
        }
    }
}


storage.buckets.versioned-files.maxNumberOfVersions = 2

storage {
    layer1 {
        replication {
            replicateDeleteDelay = 5s
            replicateUpdateDelay = 5s
            retryReplicationDelay = 10s
        }
        spaces {
            fs-test {
                engine = "fs"
            }

            fs-zip-test {
                engine = "fs"
                compression = "default"
            }

            fs-aes-test {
                engine = "fs"
                cipher = "aes256"
                passphrase = "test"
            }

            fs-zip-aes-test {
                engine = "fs"
                compression = "default"
                cipher = "aes256"
                passphrase = "test"
            }

            s3-test {
                engine = "s3"
            }

            s3-zip-test {
                engine = "s3"
                 compression = "default"
            }

            s3-aes-test {
                engine = "s3"
                cipher = "aes256"
                passphrase = "test"
            }

            s3-zip-aes-test {
                engine = "s3"
                compression = "default"
                cipher = "aes256"
                passphrase = "test"
            }

            repl-primary {
                engine = "fs"
                replicationSpace = "reply-secondary"
            }

            reply-secondary {
                engine = "s3"
            }
        }
    }

}

security {

    profiles {
        upgradeA {
            permission1: true
            permission2: true
        }

        packageBasic {
            permission3: true
        }
    }

    packages {
        test-scope-1 {
            packages = ["package1", "package2"]
            upgrades = ["upgradeA", "upgradeB", "upgradeC"]
        }

        test-scope-2 {
            packages = ["package3"]
            upgrades = ["upgradeD", "upgradeE"]
        }

        required-permissions-for-permission {
            role1a = "permission1"
            role1b = "permission1"
        }
    }
}
